{"version":"6","defaultTimeframe":{"from":"now()-2h","to":"now()"},"sections":[{"id":"e12d493a-fda4-44f3-906f-44e508e52f01","type":"dql","showTitle":false,"drilldownPath":[],"title":"Find logs ingested from the api","state":{"input":{"value":"fetch logs \n| filter isNotNull(dt.auth.origin)\n| sort timestamp desc","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"17e534b1-4d73-4f8e-83e9-538c732e1e95","type":"dql","title":"Metadata & attribute limitations of api ingest","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs \n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n| sort timestamp desc","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"state":"idle"}},{"id":"e226d890-7a5b-4d63-87ed-d4b68db92911","type":"dql","showTitle":false,"drilldownPath":[],"title":"find specific transaction id","state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240830DYNATRANSACTION792882387\")\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"ed4bd272-c9d7-4ee0-811e-24a387b856b4","type":"markdown","markdown":"#### XML Log Data \n\n```xml\n<log>\n    <timestamp>2024-08-30 04:04:12.480</timestamp>\n    <level>info</level>\n    <deviceid>DEVICE01</deviceid>\n    <transactionid>20240830DYNATRANSACTION792882387</transactionid>\n    <description>transactional record of 20240830DYNATRANSACTION792882387</description>\n    <greeting>oh hai!</greeting>\n        <metadata>\n            <operation type=\"start\">transaction initiated @ 2024-08-30 04:04:12.480</operation>\n            <operation type=\"info\">transactional record of 20240830DYNATRANSACTION792882387</operation>\n            <operation type=\"end\">all done!</operation>\n        </metadata>\n</log>\n```"},{"id":"2ce27f37-fca1-40a6-9bb8-37585658f186","type":"dql","title":"XML Capture","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240830DYNATRANSACTION792882387\")\n| parse content, pattern:\"LD '<transactionid>'LD:transactionID'</transactionid>'\"\n| parse content, pattern:\"LD '<deviceid>'LD:deviceID'</deviceid>'\"\n| fields timestamp, transactionID, deviceID\n| sort timestamp asc","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"a4dc21bc-f89d-43b1-991c-fbeddf5068ac","type":"markdown","markdown":"#### JSON Log Data\n\n``` json\n{\n    \"timestamp\": \"2024-08-30 04:04:12.675\",\n    \"level\": \"info\",\n    \"appVersion\": \"1.22.0\",\n    \"message\": \"Hey there!\",\n    \"logLogger\": \"fake.cron.job\",\n    \"transactionid\": \"20240830DYNATRANSACTION792882387\",\n    \"logType\": \"transactional record of 20240830DYNATRANSACTION792882387\",\n    \"hopMessage\": \"hop 2\",\n    \"processorNumber\": \"processor2\",\n    \"metadata\": {\n        \"purpleMonkeyDishwasherId\": \"XkDckqbTl0Zlu\",\n        \"transactionlocation\": \"processor2\",\n        \"device02external\": \"2024-08-30 04:04:12.675z\",\n        \"orininationtimestamp\": \"2024-08-30 04:04:12.480\"\n    }\n}\n```"},{"id":"f2236e92-74b2-4393-b322-7ee22115ea1c","type":"dql","title":"JSON Capture","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs \n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240829DYNATRANSACTION975257156\") \n| parse content, \"JSON:json\"\n| fieldsAdd transactionID = json[transactionid], deviceID = json[processorNumber]\n| fields timestamp, transactionID, deviceID\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"3e15e5e2-4a3c-4abc-bcc8-d6f39ebd4a52","type":"markdown","markdown":"#### Plain Text Log Data\n\n```txt\n[ 2024-08-30 04:04:12.867 ] - INFO,\"transaction recieved\",valid,20240830DYNATRANSACTION792882387,device03,starttime: 2024-08-30 04:04:12.480, \"processor numero 3 is totally processing!\"\n```"},{"id":"865bc06f-5ab5-4a09-b226-2758ee8582c4","type":"dql","title":"Plain text capture","showTitle":false,"drilldownPath":[],"showInput":true,"state":{"input":{"value":"fetch logs \n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240829DYNATRANSACTION975257156\") \n| parse content, pattern:\"LD ',valid,'LD:transactionID','\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n| fields timestamp, transactionID, DeviceHop\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"9fe40343-589d-4044-973d-fdd511e2b5e4","type":"markdown","markdown":"### Simplify device capture\n\n#### XML Log Data \n\n```xml\n<log>\n    <timestamp>2024-08-30 04:04:12.480</timestamp>\n    <level>info</level>\n    <deviceid>DEVICE01</deviceid>\n    <transactionid>20240830DYNATRANSACTION792882387</transactionid>\n    <description>transactional record of 20240830DYNATRANSACTION792882387</description>\n    <greeting>oh hai!</greeting>\n        <metadata>\n            <operation type=\"start\">transaction initiated @ 2024-08-30 04:04:12.480</operation>\n            <operation type=\"info\">transactional record of 20240830DYNATRANSACTION792882387</operation>\n            <operation type=\"end\">all done!</operation>\n        </metadata>\n</log>\n```\n\n#### JSON Log Data\n\n``` json\n{\n    \"timestamp\": \"2024-08-30 04:04:12.675\",\n    \"level\": \"info\",\n    \"appVersion\": \"1.22.0\",\n    \"message\": \"Hey there!\",\n    \"logLogger\": \"fake.cron.job\",\n    \"transactionid\": \"20240830DYNATRANSACTION792882387\",\n    \"logType\": \"transactional record of 20240830DYNATRANSACTION792882387\",\n    \"hopMessage\": \"hop 2\",\n    \"processorNumber\": \"processor2\",\n    \"metadata\": {\n        \"purpleMonkeyDishwasherId\": \"XkDckqbTl0Zlu\",\n        \"transactionlocation\": \"processor2\",\n        \"device02external\": \"2024-08-30 04:04:12.675z\",\n        \"orininationtimestamp\": \"2024-08-30 04:04:12.480\"\n    }\n}\n```\n\n\n#### Plain Text Log Data\n\n```txt\n[ 2024-08-30 04:04:12.867 ] - INFO,\"transaction recieved\",valid,20240830DYNATRANSACTION792882387,device03,starttime: 2024-08-30 04:04:12.480, \"processor numero 3 is totally processing!\"\n```\n\n### One Parse to capture them all!\n\n```\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n\n```"},{"id":"a02a4472-fbf2-4f5c-896e-9fe62ff670aa","type":"markdown","markdown":"#### So we've got 3 of 6 records captured, but what happens when we try to aggregate into our single \"transactionID\" variable ? "},{"id":"efc8dc87-20c5-47fe-b2fa-4414be0baec9","type":"dql","title":"DQL works via an oder of operations, re-setting the same variable \"transactionID\" won't provide the desired results","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID = json[transactionid], customMessage = json[message]\n| parse content, pattern:\"LD ',valid,'LD:transactionID','\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n//| filter isNotNull(transactionID)\n| fields timestamp, transactionID, DeviceHop\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"c425d4c8-e3a0-4fea-8ca4-0d7964c74e2b","type":"dql","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n| fields timestamp, transactionID01, transactionID02, transactionID03, DeviceHop\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"state":"idle"}},{"id":"df7629af-0a53-44bd-812c-8d36e90c8644","type":"markdown","markdown":"#### To prevent the overwriting, we can set a conditional variable for each capture record. One option is to do that through an if/else mechanism to check if the variable has been set, if not it will iterate through until it returns a result or comes back null: "},{"id":"60f4294a-6992-4c39-a49b-076a0fb0e6de","type":"dql","showTitle":false,"drilldownPath":[],"title":"Conditional Variables","state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03)))\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n| fields timestamp, transactionID, DeviceHop\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"b38e6693-5e28-4569-992e-b831ec4068c9","type":"markdown","markdown":"### 3 more hops to go...\n\n##### Record 04 is plain txt capture\n`| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\" `\n```txt\n[ 2024-08-30 04:04:13.001 ] - INFO,\"transfering to the moon\",transactionSpyId007,internalizedTracking#:20240830DYNATRANSACTION792882387,device04,transactionValue: 9.6,initationtime: 2024-08-30 04:04:12.480, \"whoa this still processing?!\"\n```\n\n#### Record 05 XML Capture\n\n`| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"`\n```xml\n<log>\n    <timestamp>2024-08-30 04:04:13.256</timestamp>\n    <level>info</level>\n    <deviceid>DEVICE05</deviceid>\n    <description>transactional record of a transaction</description>\n    <greeting>we've never met before</greeting>\n        <metadata>\n            <operation type=\"start\">transaction initiated @ 2024-08-30 04:04:12.480 this a really important data point</operation>\n            <operation type=\"transactionid\">PMW-20240830DYNATRANSACTION792882387</operation>\n            <operation type=\"end\">all done!</operation>\n        </metadata>\n</log>\n```"},{"id":"fa0dbde0-bbe3-48ce-b6a2-7e25ac75124e","type":"dql","title":"Merge our new parse & variables in...","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03, else: if(isNotNull(transactionID04), transactionID04, else: if(isNotNull(transactionID05), transactionID05)))))\n| fields timestamp, transactionID, DeviceHop\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"state":"idle"}},{"id":"d94382c3-c2ab-42e6-af27-4da04a2f575c","type":"markdown","markdown":"#### What about nested json?\nhops 4 & 5 are very similar to pull data from, we can use the same type LD parse strings to pull out the values.\n\nHowever looking at the logs for hop #6\n\n\nlog record 2 has the needed transaction id in the top level json object\n```json\n{\n    \"timestamp\": \"2024-08-30 04:04:12.675\",\n    \"level\": \"info\",\n    \"appVersion\": \"1.22.0\",\n    \"message\": \"Hey there!\",\n    \"logLogger\": \"fake.cron.job\",\n    \"transactionid\": \"20240830DYNATRANSACTION792882387\",\n    \"logType\": \"transactional record of 20240830DYNATRANSACTION792882387\",\n    \"hopMessage\": \"hop 2\",\n    \"processorNumber\": \"processor2\",\n    \"metadata\": {\n        \"purpleMonkeyDishwasherId\": \"XkDckqbTl0Zlu\",\n        \"transactionlocation\": \"processor2\",\n        \"device02external\": \"2024-08-30 04:04:12.675z\",\n        \"orininationtimestamp\": \"2024-08-30 04:04:12.480\"\n    }\n}\n```\n\n\nlog record 6 has the needed transaction ID nested under \"metadata\" json object. How do we acceess it? \n```json\n{\n    \"timestamp\": \"2024-08-30 04:04:13.459\",\n    \"level\": \"info\",\n    \"appVersion\": \"0.1.0\",\n    \"message\": \"the final step!\",\n    \"purpleMonkeyDishwasherId\": \"XkDckqbTl0Zlu\",\n    \"logLogger\": \"totally.nota.cronjob\",\n    \"logType\": \"the most important transaction record\",\n    \"hopMessage\": \"hop #6\",\n    \"processorNumber\": \"processor 6\",\n    \"metadata\": {\n        \"originialTransactionId\": \"20240830DYNATRANSACTION792882387\",\n        \"transactionlocation\": \"processor6\",\n        \"orininationtimestamp\": \"2024-08-30 04:04:13.459\"\n    }\n}\n```"},{"id":"1ebb1339-e929-4d62-ab64-47cfba195d84","type":"dql","showTitle":false,"drilldownPath":[],"title":"Capturing top level json compared to nested json","state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n//| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n//| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n//| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n//| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n| fields timestamp, transactionID02, transactionID06\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"eb77a316-a0b7-4ac1-9a74-575bc545a562","type":"dql","title":"Extract & Merge All Transaction IDs!","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240830DYNATRANSACTION1054329710\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03, else: if(isNotNull(transactionID04), transactionID04, else: if(isNotNull(transactionID05), transactionID05, else: if(isNotNull(transactionID06), transactionID06))))))\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n| fields timestamp, transactionID, DeviceHop\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"1496beaf-a05e-4414-8691-8da19890bee8","type":"dql","title":"Here's what that looks like with out merging","showTitle":false,"drilldownPath":[],"showInput":true,"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240830DYNATRANSACTION1054329710\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03, else: if(isNotNull(transactionID04), transactionID04, else: if(isNotNull(transactionID05), transactionID05, else: if(isNotNull(transactionID06), transactionID06))))))\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n| fields timestamp, transactionID01, transactionID02, transactionID03, transactionID04, transactionID05, transactionID\n| sort timestamp asc","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"7598e0b7-724e-4831-bb39-07c82b9a231b","type":"markdown","markdown":"#### But wait! \n\nThere's another id in here which is *business critical* which hasn't been identified until now:\n**the purple monkey dishwasher ID!!**\n\nThis transaction only exists in two of the transaction logs, #2 & #6"},{"id":"92644a76-a935-4d58-aff1-d9f8e1b0c9b3","type":"dql","showTitle":false,"drilldownPath":[],"title":"Single Transaction with Purple Monkey Dishwasher ID","state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240830DYNATRANSACTION1054329710\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n// added json parsing for PMDWID\n| fieldsAdd purpleMonkeyDishwasherID01 = json[metadata][purpleMonkeyDishwasherId]\n| fieldsAdd purpleMonkeyDishwasherID02 = json[purpleMonkeyDishwasherId]\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03, else: if(isNotNull(transactionID04), transactionID04, else: if(isNotNull(transactionID05), transactionID05, else: if(isNotNull(transactionID06), transactionID06))))))\n| fieldsAdd purpleMonkeyDishwasherID = if(isNotNull(purpleMonkeyDishwasherID01), purpleMonkeyDishwasherID01, else:if(isNotNull(purpleMonkeyDishwasherID02), purpleMonkeyDishwasherID02))\n| fields timestamp, transactionID, purpleMonkeyDishwasherID, DeviceHop\n| sort timestamp asc\n","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"11d8cc53-bbad-43c2-a465-7ca707914984","type":"markdown","markdown":"#### OH! And there's revenue data which has to be tied back to the PMWID.... but it'd doesn't exist in the same records.\n#### NOT A PROBLEM WITH DQL!!!"},{"id":"941a7ff8-82e8-4085-bf0f-26c2b126250d","type":"dql","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240830DYNATRANSACTION1054329710\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n// Added revenue from hop #4\n| parse content, pattern:\"LD 'transactionValue: 'LD:revenue','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',')\"\"\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n| fieldsAdd purpleMonkeyDishwasherID01 = json[metadata][purpleMonkeyDishwasherId]\n| fieldsAdd purpleMonkeyDishwasherID02 = json[purpleMonkeyDishwasherId]\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03, else: if(isNotNull(transactionID04), transactionID04, else: if(isNotNull(transactionID05), transactionID05, else: if(isNotNull(transactionID06), transactionID06))))))\n| fieldsAdd purpleMonkeyDishwasherID = if(isNotNull(purpleMonkeyDishwasherID01), purpleMonkeyDishwasherID01, else:if(isNotNull(purpleMonkeyDishwasherID02), purpleMonkeyDishwasherID02))\n| fields timestamp, transactionID, revenue, purpleMonkeyDishwasherID, DeviceHop\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"d8089e44-47a7-486c-a8a3-88f5601daa27","type":"markdown","markdown":"### With DQL there are multiple ways to solve a problem. Even when a new problem arises....\n\nWhat if you want to query two different transaction ids? or transaction id & a PMDWid?"},{"id":"bfe5203b-adc7-4556-8c32-782a74686070","type":"dql","title":"Parsing Data with ALL possible permutations for start and end of variables","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"20240830DYNATRANSACTION1054329710\") \n| parse content, \"\"\"DATA ('transactionid>'| 'transactionid\": \"'| 'valid,' | 'internalizedTracking#:' | 'transactionid\">PMW-' | 'originialTransactionId\": \"') LD:transactionID ('<'| '\"' | ',') \"\"\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:DeviceHop ('<'| '\"' | ',') \"\"\"\n| parse content, \"\"\"DATA 'transactionValue: ' FLOAT:revenue \"\"\"\n| parse content, \"\"\" DATA 'purpleMonkeyDishwasherId\": \"' LD:purpleMonkeyDishwasherID01 '\"' \"\"\"\n| fields timestamp, purpleMonkeyDishwasherID01, transactionID, revenue, DeviceHop, content\n| sort timestamp asc","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"d1dd3436-88a7-47ee-893c-38bd66610641","type":"markdown","markdown":"#### The Original Use Case was: Network Latency Per Transaction\n##### All glory to Mike Ferguson"},{"id":"b68d4378-12ba-4ca0-9c95-a91da4ab9b96","type":"dql","title":"Single Transactions & Network Latency for each","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n| sort timestamp desc\n// Parse transactionID. hop, purpleMonkeyDishwasherId - Start\n\n| parse content, \"\"\"DATA ('transactionid>'| 'transactionid\": \"'| 'valid,' | 'internalizedTracking#:' | 'transactionid\">PMW-' | 'originialTransactionId\": \"') LD:TransactionID ('<'| '\"' | ',')\"\"\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:hop ('<'| '\"' | ',')\"\"\"\n| parse content, \"\"\"DATA 'transactionValue: ' FLOAT:revenue \"\"\"\n| parse content, \"\"\" DATA 'purpleMonkeyDishwasherId\": \"' LD:purpleMonkeyDishwasherID01 '\"' \"\"\"\n| parse content, \"\"\"DATA '<errorcode>' LD:ErrorCode '</errorcode><error>' LD:ErrorMessage '</error>'\"\"\"\n\n// Parse transactionID. hop, purpleMonkeyDishwasherId - Stop\n\n// Generate Hop Timestamps - Start\n\n| fieldsAdd hop1_timestamp = if(hop == \"1\", timestamp),\n            hop2_timestamp = if(hop == \"2\", timestamp),\n            hop3_timestamp = if(hop == \"3\", timestamp),\n            hop4_timestamp = if(hop == \"4\", timestamp),\n            hop5_timestamp = if(hop == \"5\", timestamp),\n            hop6_timestamp = if(hop == \"6\", timestamp)\n\n// Generate Hop Timestamps - End\n\n\n// Summarize to group by TransactionID - Start\n\n| summarize {TransactionStart = takeLast(timestamp),\n            TransactionEnd =  takeFirst(timestamp),\n            PurpleMonkeyDishwasherID = takeAny(purpleMonkeyDishwasherID01),\n            Revenue = takeAny(revenue),\n            Hop1 = takeAny(hop1_timestamp),\n            Hop2 = takeAny(hop2_timestamp),\n            Hop3 = takeAny(hop3_timestamp),\n            Hop4 = takeAny(hop4_timestamp),\n            Hop5 = takeAny(hop5_timestamp),\n            Hop6 = takeAny(hop6_timestamp)},\n            by:{TransactionID}\n\n// Summarize to group by TransactionID - End\n\n// Create End to End Time and Hop fields to calculate the difference between each Hop - Start\n\n| fieldsAdd EndToEnd = TransactionEnd-TransactionStart,\n            Hop1 = Hop2-Hop1,\n            Hop2 = Hop3-Hop2,\n            Hop3 = Hop4-Hop3,\n            Hop4 = Hop5-Hop4,\n            Hop5 = Hop6-Hop5  \n\n// Create End to End Time and Hop fields to calculate the difference between each Hop - Start\n\n\n// Fields to Keep for Table Output - Start\n\n| fields    TransactionStart,\n            TransactionEnd,\n            TransactionID,\n            PurpleMonkeyDishwasherID,\n            Revenue,\n            EndToEnd,\n            Hop1,\n            Hop2,\n            Hop3,\n            Hop4,\n            Hop5           \n// Fields to Keep for Table Output - End\n\n// Sort by most recent transaction start tine - start\n\n| sort TransactionStart desc\n\n// Sort by most recent transaction start tine - end","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"2f7a65b8-88f4-4391-b20f-0f182d7fa049","type":"markdown","markdown":"#### What about transactions with errors?\n##### Are we in a world where software works perfectly? \n##### Nope.\n\n\n#### Remember: Pure log ingest has no log meta data.... what do we do?!\n#### The same thing we just did!"},{"id":"c5a3b9ec-0713-4c0c-ac0f-cbde34c9dcc1","type":"markdown","markdown":"``` xml\n<log>\n    <timestamp>2024-08-30 19:24:19.574</timestamp>\n    <level>error</level>\n    <deviceid>DEVICE01</deviceid>\n    <transactionid>20240830DYNATRANSACTION119836948</transactionid>\n    <description>transactional record of 20240830DYNATRANSACTION119836948</description>\n    <errorcode>418</errorcode>\n    <error>418 I'm a teapot</error>\n        <metadata>\n        <operation type=\"start\">transaction initiated @ 2024-08-30 19:24:19.574</operation>\n        <operation type=\"info\">transactional record of 20240830DYNATRANSACTION119836948</operation>\n        <operation type=\"metaofthemeta\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418</operation>\n        </metadata>\n</log>\n```"},{"id":"e455917b-6a81-4f97-9cd9-6e640e16e3e6","type":"dql","showTitle":false,"drilldownPath":[],"title":"XML Parsing on error fields","state":{"input":{"value":"fetch logs \n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n| parse content, pattern:\"LD '<transactionid>'LD:transactionID'</transactionid>'\"\n| parse content, pattern:\"LD '<errorcode>'LD:errorcode'</errorcode>'\"\n| parse content, pattern:\"LD '<error>'LD:error'</error>'\"\n| parse content, pattern:\"LD '<level>'LD:loglevel'</level>'\"\n| filter loglevel == \"error\"\n| fields timestamp, transactionID, loglevel, errorcode, error\n| sort timestamp desc","timeframe":{"from":"now()-30m","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"idle"}},{"id":"d87f737b-37eb-432c-a144-c54e3ae3b702","type":"dql","title":"Notebook Visulizations","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs \n| filter isNotNull(dt.auth.origin)\n| filter contains(content, \"DYNATRANSACTION\") \n| parse content, pattern:\"LD '<level>'LD:loglevel'</level>'\"\n| fields timestamp , loglevel\n| filter isNotNull(loglevel)\n| sort timestamp desc\n| summarize count(), by: {bin(timestamp,1m), loglevel }","timeframe":{"from":"now()-2h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"979b1d6e-4c02-4cc7-b278-b376adcbce2a","type":"markdown","markdown":"#### What's next?\n[Taco Corp Dashboard](https://bwm98081.apps.dynatrace.com/ui/apps/dynatrace.dashboards/dashboard/9c2c16e8-87ca-4e85-9d88-6d10d7e36ee3#from=now%28%29-2h&to=now%28%29)\n#### ^ Populated by Open Pipeline!!\n[Taco Corp Pipelines](https://bwm98081.apps.dynatrace.com/ui/apps/dynatrace.openpipeline/logs?tab=ingest-source)\n\n#### Short form lab in demo.live \n[Demo.live mini lab](https://guu84124.apps.dynatrace.com/ui/apps/dynatrace.notebooks/notebook/4c335aee-1ebf-47a9-8219-59aec0a372bc#787da0ed-2e0e-429b-afa8-af36ab3857e0) "}]}